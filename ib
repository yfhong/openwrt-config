#!/usr/bin/env bash
set -e

# Device Models (grouped by target, alphabetically ordered within groups)
# ath79/generic
dev_dir505='dlink_dir-505 ath79/generic'
dev_mw4530r='mercury_mw4530r-v1 ath79/generic'
dev_wdr4300='tplink_tl-wdr4300-v1 ath79/generic'

# ipq40xx/generic
dev_glb1300='glinet_gl-b1300 ipq40xx/generic'

# ipq806x/generic
dev_xr500='netgear_xr500 ipq806x/generic'

# mediatek/mt7622
dev_ax6s='xiaomi_redmi-router-ax6s mediatek/mt7622'

# ramips/mt7621
dev_wg3526='zbtlink_zbt-wg3526-16m ramips/mt7621'

# x86 platforms
dev_x86_32='x86/generic'
dev_x86_64='x86/64'

############### Package Groups ###############
# Basic Wireless Packages
pkg_wireless='iwinfo wpa-cli -iw iw-full'
pkg_wireless_basic='iwinfo wpa-cli iw -iw-full'

# WPAD Packages
pkg_wpad='wpad-wolfssl -wpad-mbedtls -wpad-basic-wolfssl -wpad-basic-mbedtls -wpad-mini -wpad-basic -wpad'
pkg_wpad_basic='wpad-basic-wolfssl -wpad-basic-mbedtls -wpad-wolfssl -wpad-mbedtls -wpad-mini -wpad-basic -wpad'
pkg_wpad_mesh='wpad-mesh-wolfssl -wpad-mesh-mbedtls -wpad-basic-wolfssl -wpad-basic-mbedtls -wpad-wolfssl -wpad-mbedtls -wpad-mini -wpad-basic -wpad'
pkg_wpad_mbedtls='wpad-basic-mbedtls -wpad-basic-wolfssl -wpad-wolfssl -wpad-mbedtls -wpad-mini -wpad-basic -wpad'

# Common Base Packages
#pkg_common="miniupnpd ipset ip-full -ip-tiny dnsmasq-full -dnsmasq ip-bridge $pkg_wireless"
pkg_common="miniupnpd-nftables ipset ip-full -ip-tiny dnsmasq-full -dnsmasq ip-bridge"
#pkg_common_tiny="miniupnpd ipset ip-full -ip-tiny dnsmasq-full -dnsmasq $pkg_wireless_basic $pkg_no_ppp $pkg_no_ipv6"
pkg_common_tiny="miniupnpd-nftables ip-tiny dnsmasq"
#pkg_common_wired="miniupnpd ipset ip-full -ip-tiny dnsmasq-full -dnsmasq ip-bridge $pkg_no_wireless"

# System Administration Tools
pkg_utils='diffutils ca-bundle curl'
pkg_monitor="nlbwmon etherwake watchcat"
pkg_sa='ncat tcpdump'
pkg_l2='iputils-arping arp-scan'
pkg_mactelnet='mac-telnet-client mac-telnet-discover'
pkg_sa_adv="$pkg_sa $pkg_l2 $pkg_mactelnet"
pkg_security='nmap-ssl'
pkg_hack="$pkg_security $pkg_sa_adv"
pkg_aircrack='aircrack-ng airmon-ng grep kmod-tun pciutils procps-ng procps-ng-ps usbutils'

# Network Features
pkg_gfw='shadowsocks-libev-ss-redir shadowsocks-libev-ss-rules smartdns'
pkg_vpn='wireguard-tools'
pkg_mwan='kmod-macvlan mwan3'
pkg_enhanced="adblock ddns-scripts $pkg_mwan"

# Web Interface Components
pkg_hass='rpcd uhttpd-mod-ubus uhttpd'
pkg_luci2='luci2-ui-base'
pkg_luci='luci luci-theme-material'
pkg_luci_zh='luci-i18n-base-zh-cn'

# Feature Disablers
pkg_no_wireless='-iwinfo -wpa-cli -iw -iw-full -wpad-basic-wolfssl -wpad-wolfssl -wpad-mesh-wolfssl -wpad-basic-mbedtls -wpad-mbedtls -wpad-mesh-mbedtls -wpad-mini -wpad-basic -wpad'
pkg_no_ppp='-ppp -ppp-mode-pppoe'
pkg_no_ipv6='-ip6tables -odhcp6c -kmod-ipv6 -kmod-ip6tables -odhcpd-ipv6only'

############### Usage Scenarios ###############
# Base Scenarios
# Primary - Full featured router
# - Complete network stack (IPv4 + IPv6)
# - Full wireless support with encryption
# - UPnP for internal services
# - QoS traffic control
# - Advanced firewall rules
# - VPN (WireGuard) support
# - GFW tools (Shadowsocks)
# - Network monitoring and diagnostics
# - System administration tools
# - DDNS support
scn_primary="$pkg_common $pkg_wireless $pkg_wpad $pkg_monitor $pkg_utils $pkg_sa $pkg_gfw $pkg_vpn $pkg_enhanced"

# AP - Access Point only
# - Dual stack (IPv4 + IPv6) compatible
# - Advanced wireless features
#   * 802.11k/v/r for roaming support
#   * WPA2/WPA3 encryption
#   * Band steering
#   * Client isolation option
# - Bridge mode operation
# - Minimal system tools for diagnostics
# - Relies on main router/server for network services
# - No routing features
#   * No DHCP server
#   * No DNS server
#   * No NAT
scn_ap="$pkg_wireless $pkg_wpad $pkg_utils"

# Extended Scenarios
# Office - Based on primary, optimized for office environment
# - Differs from primary:
#   * No PPPoE (using DHCP WAN)
#   * No IPv6 support
#   * Optimized for stable network
scn_office="$pkg_common $pkg_wireless $pkg_wpad $pkg_monitor $pkg_utils $pkg_sa $pkg_gfw $pkg_vpn $pkg_no_ppp $pkg_no_ipv6"

# Wired - Based on primary, for wired-only environment
# - Differs from primary:
#   * No wireless features
#   * Enhanced wired capabilities
#   * Advanced system monitoring
#   * Additional diagnostic tools
scn_wired="$pkg_common $pkg_no_wireless $pkg_monitor $pkg_utils $pkg_sa_adv $pkg_gfw $pkg_vpn $pkg_enhanced"

# IoT - Based on primary, for IoT gateway and control
# - Differs from primary:
#   * IoT gateway functionality
#   * Smart device orchestration
#   * Home Assistant integration
#   * Web dashboard for device control
#   * IoT protocol support
scn_iot="$pkg_common $pkg_wireless $pkg_wpad $pkg_monitor $pkg_utils $pkg_sa $pkg_gfw $pkg_vpn $pkg_enhanced $pkg_hass"

# Travel - Minimal setup for portable use
# - Differs from primary:
#   * Minimal package set
#   * No PPPoE/IPv6
#   * Basic system tools only
#   * Optimized for size and performance
scn_travel="$pkg_common_tiny $pkg_wireless_basic $pkg_wpad_mbedtls $pkg_gfw $pkg_vpn $pkg_no_ppp $pkg_no_ipv6"

############### Device Profiles ###############
# Manual Profiles (customized combinations)
# These profiles take precedence over auto-generated ones
prof_ax6s_office="$dev_ax6s $scn_office"
prof_dir505_travel="$dev_dir505 $scn_travel"
prof_glb1300_iot="$dev_glb1300 $scn_iot"
prof_mw4530r_ap="$dev_mw4530r $scn_ap"
prof_wg3526_office="$dev_wg3526 $scn_office"
prof_x86_64_iot="$dev_x86_64 $scn_iot"

# Auto-generated Profiles
# Generated from device and scenario combinations
# Will be skipped if a manual profile with same name exists
generate_profiles() {
    local profiles=()
    for dev in $(compgen -v | grep '^dev_'); do
        for scn in $(compgen -v | grep '^scn_'); do
            # Remove prefix to get base names
            local dev_base=${dev#dev_}
            local scn_base=${scn#scn_}
            local prof_name="prof_${dev_base}_${scn_base}"

            # Skip if manual profile exists
            if [ -n "${!prof_name}" ]; then
                continue
            fi

            # Create auto profile
            eval "$prof_name=\"\$$dev \$$scn\""
            profiles+=("$prof_name")
        done
    done
    echo "${profiles[@]}"
}

# Get manual profiles (any prof_* variable that's already defined)
MANUAL_PROFILES=($(compgen -v | grep '^prof_'))

# Generate automatic profiles
AUTO_PROFILES=($(generate_profiles))

# Combine manual and auto-generated profiles
profiles=(${MANUAL_PROFILES[@]} ${AUTO_PROFILES[@]})

# Legacy Profiles (for reference)
#prof_mw4530r_basic="$dev_mw4530r $pkg_common_tiny $pkg_sa $pkg_ddns $pkg_gfw $pkg_vpn $pkg_wpad_basic"
#prof_mw4530r_basic_openssl="$dev_mw4530r $pkg_common_tiny $pkg_sa_tiny $pkg_gfw $pkg_vpn $pkg_wpad_basic_openssl -libustream-wolfssl libustream-openssl"
#prof_mw4530r_main="$dev_mw4530r $pkg_common $pkg_sa $pkg_ddns $pkg_gfw $pkg_vpn $pkg_wpad"
#prof_glb1300_main="$dev_glb1300 $pkg_common $pkg_sa $pkg_ddns $pkg_gfw $pkg_vpn $pkg_wpad"
#wired router.
#prof_x86_main="$dev_x86_32 $pkg_common_wired $pkg_sa_adv $pkg_ddns $pkg_gfw $pkg_vpn"
#prof_x86_64_main="$dev_x86_64 $pkg_common_wired $pkg_sa_adv $pkg_ddns $pkg_gfw $pkg_vpn"
#travel router dir-505. dhcp wan + private wifi + vpn to office + gfw
#prof_dir505_main="$dev_dir505 $pkg_common_tiny curl ca-bundle netcat tcpdump $pkg_gfw $pkg_vpn $pkg_wpad_basic"
#prof_dir505_main_openssl="$dev_dir505 $pkg_common_tiny curl ca-bundle netcat tcpdump $pkg_gfw $pkg_vpn $pkg_wpad_basic_openssl"
#prof_dir505_main_openssl="$dev_dir505 $pkg_common_tiny diffutils curl ca-bundle $pkg_sa_tiny $pkg_gfw $pkg_vpn $pkg_wpad_basic_openssl"

build() {
    device="$1"
    shift
    profile="$1"
    shift
    target="$1"
    shift
    packages="$@"
    echo "PROFILE=$profile TARGET=$target PACKAGES=\"$packages\" EXTRA_IMAGE_NAME="$device" REPOS=\"$REPOS\""
    if [ "$GEN_ONLY" != 'yes' ]; then
        PROFILE="$profile" TARGET="$target" PACKAGES="$packages" EXTRA_IMAGE_NAME="$device" REPOS="$REPOS" FILES="files/$device" ./meta image
    fi
}

hr() {
    echo '------------------------------------------------------------'
}

while getopts "g" option; do
    case "$option" in
    g) GEN_ONLY="yes" ;;
    *) ;;
    esac
done
shift "$((OPTIND - 1))"

devices="$@"
if [ -z "$devices" ]; then
    for i in "${!profiles[@]}"; do
        printf "%s %s\n" "[$((i + 1))]" "${profiles[$i]}"
    done
    echo -en "\ndevices:\033[1A\radd: "
    while read -r i; do
        if [ "$i" = '' ]; then
            if [ -z "$devices" ]; then
                devices="${profiles[0]}"
                echo -e "devices: ${devices}\033[1A\033[2K\radd: "
            fi
            break
        fi
        devices="${profiles[$((i - 1))]} $devices"
        echo -en "devices: ${devices}\033[1A\033[2K\radd: "
    done
    echo
fi

for device in $devices; do
    modules="${!device}"
    if [ -z "$modules" ]; then
        echo "No device found: $device"
        exit 1
    fi

    hr

    echo "Build: $device"
    build "$device" $modules
done
