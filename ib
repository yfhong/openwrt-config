#!/usr/bin/env bash
set -e

# Environment variables for cryptographic library selection
CRYPTO_LIB="${CRYPTO_LIB:-wolfssl}" # Default to wolfssl
WPAD_OPTION="${WPAD_OPTION:-full}"  # Default to full feature set

# Device Models (grouped by target, alphabetically ordered within groups)
# ath79/generic
dev_dir505='dlink_dir-505 ath79/generic'
dev_mw4530r='mercury_mw4530r-v1 ath79/generic'
#dev_mw4530rold='mw4530r-v1 ar71xx/generic'

# ipq40xx/generic
dev_glb1300='glinet_gl-b1300 ipq40xx/generic'

# ipq806x/generic
# dev_xr500='netgear_xr500 ipq806x/generic'

# mediatek/mt7622
dev_ax6s='xiaomi_redmi-router-ax6s mediatek/mt7622'

# ramips/mt7621
dev_wg3526='zbtlink_zbt-wg3526-16m ramips/mt7621'

# x86 platforms
dev_x86_32='x86/generic'
dev_x86_64='x86/64'

############### Package Groups ###############
# Function to generate a package group
# - Select one package from a list of conflicting packages with similar features.
# - If the first argument is 'none', disable all packages in the list.
one_or_none() {
    local pkg_selected="$1"
    local pkg_list="$2"
    local pkg_group=""

    # Check if the user wants to disable all packages
    if [ "$pkg_selected" == "none" ]; then
        for pkg in $pkg_list; do
            pkg_group+="-${pkg} " # Disable all packages
        done
    else
        for pkg in $pkg_list; do
            if [ "$pkg" = "$pkg_selected" ]; then
                pkg_group+="$pkg " # Include the selected package
            else
                pkg_group+="-${pkg} " # Disable other packages
            fi
        done
    fi

    echo "$pkg_group"
}

### Common Base Packages
#
# Cryptographic library Packages
# Complete Crypto Lib package list and selected one
list_libustream_pkgs='libustream-mbedtls libustream-wolfssl libustream-openssl'
libustream_selected="libustream-${CRYPTO_LIB}"
# Generate the WPAD package group
pkg_crypto_lib=$(one_or_none "$libustream_selected" "$list_libustream_pkgs")

# System Basic Environment Packages
# Essential packages for secure file transfer and SSL/TLS support.
pkg_sys_base='ca-bundle ca-certificates openssh-sftp-server'

# IP Utilities
# - Use 'pkg_iputils' for full network management capabilities.
# - Use 'pkg_iputils_tiny' for lightweight operations in minimal environments,
#   such as access points (AP) or devices with limited ROM.
pkg_iputils='ipset ip-full -ip-tiny ip-bridge'
pkg_iputils_tiny='-ipset -ip-full ip-tiny -ip-bridge'

# Disable all IPv6 support packages
# For environments that only require IPv4, helping to save space.
pkg_no_ipv6='-ip6tables -odhcp6c -kmod-ipv6 -kmod-ip6tables -odhcpd-ipv6only'

### Wireless Packages
#
# These functionalities are essential for devices operating as wireless devices,
# whether as an access point (AP) in fat or fit mode, a station (STA), or an extender.
#
# Basic packages required for wireless connectivity and management.
pkg_wireless='iwinfo wpa-cli -iw iw-full'
pkg_wireless_basic='iwinfo wpa-cli iw -iw-full'

# WPAD Packages
# Complete WPAD package list and selected one.
# - The wpad-basic-* versions only have 802.11r and 802.11w support.
# - The wpad-mesh-* versions only have 802.11r/w and 802.11s support.
# - The wpad-* are the full version of wpad (meaning nothing was trimmed to
#   reduce its size) and have 802.11k/v/r/w and 802.11s support.
list_wpad_pkgs='\
                wpad wpad-mini wpad-basic \
                wpad-basic-mbedtls wpad-basic-wolfssl wpad-basic-openssl \
                wpad-mesh-mbedtls wpad-mesh-wolfssl wpad-mesh-openssl \
                wpad-mbedtls wpad-wolfssl wpad-openssl\
                '
wpad_selected=''

# Determine the WPAD packages
case "$WPAD_OPTION" in
none)
    wpad_selected='none'
    ;;
mini)
    wpad_selected='wpad-mini'
    ;;
basic)
    wpad_selected="wpad-basic-${CRYPTO_LIB}"
    ;;
mesh)
    wpad_selected="wpad-mesh-${CRYPTO_LIB}"
    ;;
full)
    wpad_selected="wpad-${CRYPTO_LIB}"
    ;;
*)
    echo "Invalid WPAD option selected."
    exit 1
    ;;
esac

# Generate the WPAD package group
pkg_wpad=$(one_or_none "$wpad_selected" "$list_wpad_pkgs")

# Aircrack-ng Packages
# Included for wireless security testing.
pkg_aircrack='aircrack-ng airmon-ng kmod-tun'

# Disable all wireless-related packages
pkg_no_wireless=$(echo "$pkg_wireless $list_wpad_pkgs" | tr ' ' '\n' | sed '/^-/!s/^/-/' | tr '\n' ' ')

### Router Core Feature Related Packages
#
# Required for routers and gateways to manage network traffic and provide essential services.
# These functionalities may not be necessary for devices operating as access points (AP) or servers.
# Router core features may include:
# - DNS server management
# - DHCP server
# - Multi-WAN support
# - PPP support
# - Firewall features
pkg_no_dhcpd='-dnsmasq -dnsmasq-full -odhcpd -odhcpd-ipv6only'
pkg_dns='dnsmasq-full -dnsmasq smartdns'
pkg_dns_basic='-dnsmasq-full dnsmasq -smartdns'
pkg_no_dns='-dnsmasq -dnsmasq-full -smartdns'
pkg_firewall_enhanced='miniupnpd-nftables'
pkg_no_firewall='\
                -firewall -firewall3 -firewall4 \
                -iptables -iptables-zz-legacy -iptables-nft \
                -ip6tables -ip6tables-zz-legacy -ip6tables-nft \
                -nftables -nftables-json -nftables-nojson\
                '
pkg_mwan='kmod-macvlan mwan3'
pkg_no_ppp='-ppp -ppp-mod-pppoe'

### Network Features
#
# These packages provide additional functionalities for network management.
# - GFW tools are only relevant when **pkg_dns** is enabled,
# - WireGuard is used for secure access to the private network from the internet,
#   and DDNS scripts depend on **pkg_utils**.
pkg_gfw='shadowsocks-libev-ss-redir shadowsocks-libev-ss-rules'
pkg_vpn='wireguard-tools ddns-scripts'
pkg_misc='adblock'

### System Administration Tools
#
pkg_utils='diffutils curl'
pkg_net_debug='ncat tcpdump'
pkg_utils_enhanced='grep procps-ng procps-ng-ps'
pkg_l2utils='iputils-arping arp-scan mac-telnet-client mac-telnet-discover'
pkg_monitor='nlbwmon etherwake watchcat'
pkg_security='nmap-ssl'
pkg_hw='pciutils usbutils'

# Web Interface Components
pkg_hass='rpcd uhttpd-mod-ubus uhttpd'
pkg_luci2='luci2-ui-base'
pkg_luci='luci luci-theme-material'
pkg_luci_zh='luci-i18n-base-zh-cn'

############### Usage Scenarios ###############
# Base Scenarios
# Primary - Full featured router
# - Complete network stack (IPv4 + IPv6)
# - Full wireless support with encryption
# - UPnP for internal services
# - QoS traffic control
# - Advanced firewall rules
# - VPN (WireGuard) support
# - GFW tools (Shadowsocks)
# - Network monitoring and diagnostics
# - System administration tools
# - DDNS support
scn_primary="\
        ${pkg_crypto_lib} \
        ${pkg_sys_base} \
        ${pkg_iputils} \
        ${pkg_wireless} \
        ${pkg_wpad} \
        ${pkg_dns} \
        ${pkg_firewall_enhanced} \
        ${pkg_mwan} \
        ${pkg_gfw} \
        ${pkg_vpn} \
        ${pkg_misc} \
        ${pkg_utils} \
        ${pkg_net_debug} \
        ${pkg_monitor}\
        "

# AP - Access Point only
# - Dual stack (IPv4 + IPv6) compatible
# - Advanced wireless features
#   * 802.11k/v/r for roaming support
#   * WPA2/WPA3 encryption
#   * Band steering
#   * Client isolation option
# - Bridge mode operation
# - Minimal system tools for diagnostics
# - Relies on main router/server for network services
# - No routing features
#   * No DHCP server
#   * No DNS server
#   * No NAT
scn_ap="\
        ${pkg_crypto_lib} \
        ${pkg_sys_base} \
        ${pkg_iputils_tiny} \
        ${pkg_wireless} \
        ${pkg_wpad} \
        ${pkg_no_dhcpd} \
        ${pkg_no_dns} \
        ${pkg_no_firewall} \
        ${pkg_no_ppp} \
        "

# Extended Scenarios
# Office - Based on primary, optimized for office environment
# - Differs from primary:
#   * No PPPoE (using DHCP WAN)
#   * No IPv6 support
#   * Optimized for stable network
scn_office="\
        ${pkg_crypto_lib} \
        ${pkg_sys_base} \
        ${pkg_iputils} \
        ${pkg_no_ipv6} \
        ${pkg_wireless} \
        ${pkg_wpad} \
        ${pkg_dns} \
        ${pkg_firewall_enhanced} \
        ${pkg_no_ppp} \
        ${pkg_gfw} \
        ${pkg_vpn} \
        ${pkg_misc} \
        ${pkg_utils} \
        ${pkg_net_debug} \
        ${pkg_monitor}\
        "

# Wired - Based on primary, for wired-only environment
# - Differs from primary:
#   * No wireless features
#   * Enhanced wired capabilities
#   * Advanced system monitoring
#   * Additional diagnostic tools
scn_wired="\
        ${pkg_crypto_lib} \
        ${pkg_sys_base} \
        ${pkg_iputils} \
        ${pkg_no_wireless} \
        ${pkg_dns} \
        ${pkg_firewall_enhanced} \
        ${pkg_mwan} \
        ${pkg_gfw} \
        ${pkg_vpn} \
        ${pkg_misc} \
        ${pkg_utils} \
        ${pkg_net_debug} \
        ${pkg_utils_enhanced} \
        ${pkg_l2utils} \
        ${pkg_monitor} \
        ${pkg_security} \
        ${pkg_hw}\
        "

# IoT - Based on primary, for IoT gateway and control
# - Differs from primary:
#   * IoT gateway functionality
#   * Smart device orchestration
#   * Home Assistant integration
#   * Web dashboard for device control
#   * IoT protocol support
scn_iot="\
        ${pkg_crypto_lib} \
        ${pkg_sys_base} \
        ${pkg_iputils} \
        ${pkg_wireless} \
        ${pkg_wpad} \
        ${pkg_dns} \
        ${pkg_firewall_enhanced} \
        ${pkg_mwan} \
        ${pkg_gfw} \
        ${pkg_vpn} \
        ${pkg_misc} \
        ${pkg_utils} \
        ${pkg_net_debug} \
        ${pkg_monitor} \
        ${pkg_hass}\
        "

# Travel - Minimal setup for portable use
# - Differs from primary:
#   * Minimal package set
#   * No PPPoE/IPv6
#   * Basic system tools only
#   * Optimized for size and performance
scn_travel="\
        ${pkg_crypto_lib} \
        ${pkg_sys_base} \
        ${pkg_iputils_tiny} \
        ${pkg_wireless_basic} \
        ${pkg_wpad} \
        ${pkg_dns} \
        ${pkg_firewall_enhanced} \
        ${pkg_gfw} \
        ${pkg_vpn} \
        ${pkg_utils} \
        ${pkg_net_debug}\
        "

############### Device Profiles ###############
# Manual Profiles (customized combinations)
# These profiles take precedence over auto-generated ones
prof_ax6s_office="$dev_ax6s $scn_office"
prof_dir505_travel="$dev_dir505 $scn_travel"
prof_glb1300_primary="$dev_glb1300 $scn_primary"
prof_mw4530r_ap="$dev_mw4530r $scn_ap"
prof_wg3526_office="$dev_wg3526 $scn_office"
prof_x86_64_wired="$dev_x86_64 $scn_wired"
prof_x86_64_iot="$dev_x86_64 $scn_iot"

# Auto-generated Profiles
# Generated from device and scenario combinations
# Will be skipped if a manual profile with same name exists
generate_profiles() {
    local profiles=()
    local devices=($(compgen -v | grep '^dev_'))
    local scenarios=($(compgen -v | grep '^scn_'))

    for dev in "${devices[@]}"; do
        for scn in "${scenarios[@]}"; do
            # Create profile name directly from device and scenario
            local prof_name="prof_${dev#dev_}_${scn#scn_}"

            # Skip if manual profile exists
            if [ -n "${!prof_name}" ]; then
                continue
            fi

            # Create auto profile
            eval "$prof_name=\"\$$dev \$$scn\""
            profiles+=("$prof_name")
        done
    done
    echo "${profiles[@]}"
}

# Get manual profiles (any prof_* variable that's already defined)
MANUAL_PROFILES=($(compgen -v | grep '^prof_'))

# Generate automatic profiles
AUTO_PROFILES=($(generate_profiles))

# Combine manual and auto-generated profiles
profiles=(${MANUAL_PROFILES[@]} ${AUTO_PROFILES[@]})

# Legacy Profiles (for reference)
#prof_mw4530r_basic="$dev_mw4530r $pkg_common_tiny $pkg_sa $pkg_ddns $pkg_gfw $pkg_vpn $pkg_wpad_basic"
#prof_mw4530r_basic_openssl="$dev_mw4530r $pkg_common_tiny $pkg_sa_tiny $pkg_gfw $pkg_vpn $pkg_wpad_basic_openssl"
#prof_mw4530r_main="$dev_mw4530r $pkg_common $pkg_sa $pkg_ddns $pkg_gfw $pkg_vpn $pkg_wpad"
#prof_glb1300_main="$dev_glb1300 $pkg_common $pkg_sa $pkg_ddns $pkg_gfw $pkg_vpn $pkg_wpad"
#wired router.
#prof_x86_main="$dev_x86_32 $pkg_common_wired $pkg_sa_adv $pkg_ddns $pkg_gfw $pkg_vpn"
#prof_x86_64_main="$dev_x86_64 $pkg_common_wired $pkg_sa_adv $pkg_ddns $pkg_gfw $pkg_vpn"
#travel router dir-505. dhcp wan + private wifi + vpn to office + gfw
#prof_dir505_main="$dev_dir505 $pkg_common_tiny curl ca-bundle netcat tcpdump $pkg_gfw $pkg_vpn $pkg_wpad_basic"
#prof_dir505_main_openssl="$dev_dir505 $pkg_common_tiny curl ca-bundle netcat tcpdump $pkg_gfw $pkg_vpn $pkg_wpad_basic_openssl"
#prof_dir505_main_openssl="$dev_dir505 $pkg_common_tiny diffutils curl ca-bundle $pkg_sa_tiny $pkg_gfw $pkg_vpn $pkg_wpad_basic_openssl"

# Function to get modules from profile name
get_modules_from_profile() {
    local image="$1"
    local dev_name="${image#prof_}"
    local dev_base="${dev_name%%_*}"
    local scn_base="${dev_name#*_}"

    # Construct the variable names for device and scenario
    local dev_var="dev_$dev_base"
    local scn_var="scn_$scn_base"

    # Check if the constructed device and scenario variables exist
    if [ -n "${!dev_var}" ] && [ -n "${!scn_var}" ]; then
        # Create the profile definition
        echo "${!dev_var} ${!scn_var}"
    else
        echo ""
    fi
}

build() {
    image="$1"
    shift
    profile="$1"
    shift
    target="$1"
    shift
    packages="$@"
    echo "PROFILE=$profile TARGET=$target PACKAGES=\"$packages\" EXTRA_IMAGE_NAME="$image" REPOS=\"$REPOS\""
    if [ "$GEN_ONLY" != 'yes' ]; then
        PROFILE="$profile" TARGET="$target" PACKAGES="$packages" EXTRA_IMAGE_NAME="$image" REPOS="$REPOS" FILES="files/$image" ./meta image
    fi
}

hr() {
    echo '------------------------------------------------------------'
}

while getopts "g" option; do
    case "$option" in
    g) GEN_ONLY="yes" ;;
    *) ;;
    esac
done
shift "$((OPTIND - 1))"

# Rename devices to images
images="$@"
if [ -z "$images" ]; then
    for i in "${!profiles[@]}"; do
        printf "%s %s\n" "[$((i + 1))]" "${profiles[$i]}"
    done
    echo -en "\nimages:\033[1A\radd: "
    while read -r i; do
        if [ "$i" = '' ]; then
            if [ -z "$images" ]; then
                images="${profiles[0]}"
                echo -e "images: ${images}\033[1A\033[2K\radd: "
            fi
            break
        fi
        images="${profiles[$((i - 1))]} $images"
        echo -en "images: ${images}\033[1A\033[2K\radd: "
    done
    echo
fi

for image in $images; do
    modules="${!image}"

    if [ -z "$modules" ]; then
        # Call the function to get modules from the profile name
        modules=$(get_modules_from_profile "$image")

        if [ -z "$modules" ]; then
            echo "No image found: $image"
            exit 1
        fi
    fi

    hr

    echo "Build: $image"
    build "$image" $modules
done
